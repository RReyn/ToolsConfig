" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.
" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim
call pathogen#infect()
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 显示相关  
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 启动的时候不显示那个援助乌干达儿童的提示  
set shortmess=atI
"去掉有关vi的一致性模式，避免以前版本的一些Bug和局限性   
set nocompatible
""关掉VIM的错误提示音
set noeb
set vb t_vb=
" 设定窗口位置  	
"winpos 5 5   
" 设定窗口大小      
"set lines=40 columns=155  
" 显示行号    
set number      
" 语法高亮           
syntax on
" 在Vim窗口的右下角显示当前光标的行列信息       
set ruler
" 在命令行显示执行的命令，不完整的也显示      
set showcmd        
" 不要闪烁(不明白)   
set novisualbell      
" 状态行显示的内容
"set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}    
"set statusline=%F%m%r%h%w\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}    
" 状态显示行，0：永远没有，1：只有分隔窗口时(默认值)，2：总是存在  
set laststatus=2    
" 进入文件后，光标停留在上次退出的位置
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif
""Highlight current line
"au WinLeave * set nocursorline nocursorcolumn
"au WinEnter * set cursorline cursorcolumn
"set cursorline cursorcolumn

" 解决退格键不能删除的问题  
"    indent: 如果用了:set indent,:set ai 等自动缩进，想用退格键将字段缩进的删掉，必须设置这个选项。否则不响应。
"    eol:如果插入模式下在行开头，想通过退格键合并两行，需要设置eol。
"    start：要想删除此次插入前的输入，需设置这个
set backspace=indent,eol,start  
" 背景使用黑色，还可以设置为light				
if has('gui_running')
	set background=light
else
	set background=dark
endif
if exists('$TMUX')
	set term=screen-256color
endif
"set background=dark
let g:solarized_termcolors=256
set encoding=utf-8
" 设置配色方案
" 可以选择不同的配色方案，vim配色方案都存放在/usr/share/vim/vim74/colors/(可能每个人机器上不一样)目录下
"colorscheme solarized 
colorscheme grb256
"colorscheme murphy
"colorscheme vividchalk
"colorscheme candy 
"colorscheme railscasts
"colorscheme distinguished
"colorscheme Guardian
"colorscheme twilight
"colorscheme github 
"colorscheme desert 
"colorscheme Tomorrow
"colorscheme Tomorrow-Night
"colorscheme Tomorrow-Night-Blue
"colorscheme Tomorrow-Night-Bright
"colorscheme wombat256
"colorscheme wombat256mod
"
"airline config {
"function! AccentDemo()
"	let keys = ['a','b','c','d','e','f','g','h']
"	for k in keys
"		call airline#parts#define_text(k, k)
"	endfor
"	call airline#parts#define_accent('a', 'red')
"	call airline#parts#define_accent('b', 'green')
"	call airline#parts#define_accent('c', 'blue')
"	call airline#parts#define_accent('d', 'yellow')
"	call airline#parts#define_accent('e', 'orange')
"	call airline#parts#define_accent('f', 'purple')
"	call airline#parts#define_accent('g', 'bold')
"	call airline#parts#define_accent('h', 'italic')
"	let g:airline_section_a = airline#section#create(keys)
"endfunction
"autocmd VimEnter * call AccentDemo()
set laststatus=2
"let g:airline_powerline_fonts = 1
"let g:airline#extensions#tabline#enabled = 1
"let g:airline#extensions#tabline#left_sep = ' '
"let g:airline#extensions#tabline#left_alt_sep = '|'
"}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""新文件标题""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"新建.c,.h,.sh,.java,.py,.lua文件，自动插入文件头 
"autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java,*.py,*.lua exec ":call SetTitle()" 
""定义函数SetTitle，自动插入文件头 
"func SetTitle() 
    "如果文件类型为.sh文件 
"    if &filetype == 'sh' 
"	    call setline(1,"\#########################################################################") 
"	    call append(line("."), "\# File Name: ".expand("%")) 
"	    call append(line(".")+1, "\# Author: Test") 
"	    call append(line(".")+2, "\# mail: Test@mail.com") 
"	    call append(line(".")+3, "\# Created Time: ".strftime("%c")) 
"	    call append(line(".")+4, "\#########################################################################") 
"	    call append(line(".")+5, "\#!/bin/bash") 
"	    call append(line(".")+6, "") 
"    elseif &filetype == 'c'
"	    call setline(1, "/*************************************************************************") 
"	    call append(line("."), "  >> File Name: ".expand("%")) 
"	    call append(line(".")+1, "  >> Author: Test") 
"	    call append(line(".")+2, "  >> Mail: Test@mail.com ") 
"	    call append(line(".")+3, "  >> Created Time: ".strftime("%c")) 
"	    call append(line(".")+4, " ************************************************************************/") 
"	    call append(line(".")+5, "")
"    elseif &filetype == 'python'
"	    call setline(1, "\##########################################################################") 
"	    call append(line("."), "  \## File Name: ".expand("%")) 
"	    call append(line(".")+1, "  \## Author: Test") 
"	    call append(line(".")+2, "  \## Mail: Test@mail.com ") 
"	    call append(line(".")+3, "  \## Created Time: ".strftime("%c")) 
"	    call append(line(".")+4, "\##########################################################################") 
"	    call append(line(".")+5, "")
"    elseif &filetype == 'lua'
"	    call setline(1, "\--------------------------------------------------------------------------") 
"	    call append(line("."), "  \-- File Name: ".expand("%")) 
"	    call append(line(".")+1, "  \-- Author: Test") 
"	    call append(line(".")+2, "  \-- Mail: Test@mail.com ") 
"	    call append(line(".")+3, "  \-- Created Time: ".strftime("%c")) 
"	    call append(line(".")+4, "\--------------------------------------------------------------------------") 
"	    call append(line(".")+5, "")
"    endif
"    if &filetype == 'c'
"	    call append(line(".")+6, "#include <stdio.h>")
"	    call append(line(".")+7, "#include <string.h>")
"	    call append(line(".")+8, "")
"    endif
    "新建文件后，自动定位到文件末尾 
    "好像未生效 -_-!
"    autocmd BufNewFile * normal G  
"endfunc 

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""实用设置
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"文件在Vim之外修改过，自动重新读入
set autoread 
" quickfix模式
autocmd FileType c,cpp map <buffer> <leader><space> :w<cr>:make<cr>
" 侦测文件类型
filetype on
" 载入文件类型插件
filetype plugin on
" 为特定文件类型载入相关缩进文件
filetype indent on
"共享剪贴板
set clipboard+=unnamed   
"从不备份
set nobackup  
set noswapfile 
" 自动保存
set autowrite  
" 突出显示当前行
set cursorline     
" 在vim中使用正则表达式时，magic(\m):除了 $ . * ^ 之外其他元字符都要加反斜杠进行转义
" 			   nomagic (\M)：除了 $ ^ 之外其他元字符都要加反斜杠         
set magic      
" 去掉输入错误的提示声音             
set noeb 
" 在处理未保存或只读文件的时候，弹出确认
set confirm 
" 自动缩进
"Vim在开始一个新行时对该行施以上一行的缩进方式
set autoindent 
"C程序缩进
set cindent		
" 为C程序提供自动缩进
set smartindent
" Tab键的宽度
set tabstop=8
" 统一缩进为8
set softtabstop=8
set shiftwidth=8
" 不要用空格代替制表符
set noexpandtab
" 在行和段开始处使用制表符
set smarttab
" 历史记录数
set history=1000
" 搜索忽略大小写
set ignorecase 
"搜索逐字符高亮
set hlsearch
set incsearch
"行内替换
set gdefault
"编码设置
set enc=utf-8
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
" 命令行（在状态行下）的高度，默认为1，这里是2
set cmdheight=1
" 保存全局变量
set viminfo+=!
" 带有如下符号的单词不要被换行分割
set iskeyword+=_,$,@,%,#,-
" 增强模式中的命令行自动完成操作
set wildmenu
" 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）
if has('mouse') 
	set mouse-=a
endif
" 指定在选择文本时， 光标所在位置也属于被选中的范围。 如果指定 selection=exclusive
" 的话， 可能会出现某些文本无法被选中的情况。
set selection=inclusive 
set selectmode=mouse,key 
" 通过使用: commands命令，告诉我们文件的哪一行被改变过
set report=0
" 在被分割的窗口间显示空白，便于阅读
set fillchars=vert:\ ,stl:\ ,stlnc:\
" 高亮显示匹配的括号
set showmatch
" 匹配括号高亮的时间（单位是十分之一秒）
set matchtime=1
" 光标移动到buffer的顶部和底部时保持3行距离
set scrolloff=1
"设置80列显示竖线，vim7.3以后版本支持
if exists('+colorcolumn')
  set colorcolumn=80
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

" 高亮显示普通txt文件（需要txt.vim脚本）
"au BufRead,BufNewFile *  setfiletype txt
"自动补全
":inoremap ( ()<ESC>i
":inoremap ) <c-r>=ClosePair(')')<CR>
":inoremap { {<CR>}<ESC>O
":inoremap } <c-r>=ClosePair('}')<CR>
":inoremap [ []<ESC>i
":inoremap ] <c-r>=ClosePair(']')<CR>
":inoremap \" \""<ESC>i
":inoremap ' ''<ESC>i
"function! ClosePair(char)
"    if getline('.')[col('.') - 1] == a:char
"        return \"\<Right>"
"    else
"        return a:char
"    endif
"endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CTags的设定  
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let Tlist_Sort_Type = "name"    " 按照名称排序  
let Tlist_Use_Right_Window = 1  " 在右侧显示窗口  
let Tlist_Compart_Format = 1    " 压缩方式  
let Tlist_Exist_OnlyWindow = 1  " 如果只有一个buffer，kill窗口也kill掉buffer  
let Tlist_File_Fold_Auto_Close = 0  " 不要关闭其他文件的tags  
let Tlist_Enable_Fold_Column = 0    " 不要显示折叠树  
autocmd FileType java set tags+=D:\tools\java\tags  
"autocmd FileType h,cpp,cc,c set tags+=D:\tools\cpp\tags  
"let Tlist_Show_One_File=1            "不同时显示多个文件的tag，只显示当前文件的
" 设置tags  
" 在vimrc中添加此命令是为了在子文件中使用tags进行跳转
nmap tt :Tlist<cr>
nmap ww <c-w>w
set tags=tags;   
set autochdir
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"默认关闭Taglist ，1为打开
let Tlist_Auto_Open=0 
"""""""""""""""""""""""""""""" 
" Tag list (ctags) 
"""""""""""""""""""""""""""""""" 
let Tlist_Ctags_Cmd = '/usr/bin/ctags' 
let Tlist_Show_One_File = 1 "不同时显示多个文件的tag，只显示当前文件的 
let Tlist_Exit_OnlyWindow = 1 "如果taglist窗口是最后一个窗口，则退出vim 
let Tlist_Use_Right_Window = 0 "在右侧窗口中显示taglist窗口
let Tlist_Process_File_Always = 1 "taglist 始终解析tags文件 
" minibufexpl插件的一般设置
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
	syntax on
endif

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
	source /etc/vim/vimrc.local
endif
